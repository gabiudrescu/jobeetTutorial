<?php

namespace GabiU\JobeetBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NoResultException;
use Doctrine\ORM\Tools\Pagination\Paginator;
use GabiU\JobeetBundle\Utils\Jobeet as Utils;

/**
 * JobRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class JobRepository extends EntityRepository
{
    /**
     * @param int $days
     *
     * @return mixed
     */
    public function cleanup($days)
    {
        $date = new \DateTime(sprintf("-%d days", $days));

        $query = $this->createQueryBuilder("j")
            ->delete()
            ->where("j.isActivated = 0")
            ->andWhere("j.createdAt < :created_at")
            ->setParameter("created_at", $date->format("Y-m-d"))
            ->getQuery();

        return $query->execute();
    }

    public function getActiveJob($id)
    {
        $query = $this->createQueryBuilder('j')
            ->where('j.id = :id')
            ->setParameter('id', $id)
            ->andWhere('j.expiresAt > :date')
            ->setParameter('date', date('Y-m-d H:i:s', time()))
            ->andWhere("j.isActivated = :activated")
            ->setParameter("activated", true)
            ->setMaxResults(1)
            ->getQuery();

        try {
            $job = $query->getSingleResult();
        } catch (NoResultException $e) {
            $job = null;
        }

        return $job;
    }

    public function countActiveJobs($category_id = null)
    {
        $qb = $this->createQueryBuilder('j')
            ->select('count(j.id)')
            ->where('j.expiresAt > :date')
            ->andWhere("j.isActivated = :activated")
            ->setParameter("activated", true)
            ->setParameter('date', date('Y-m-d H:i:s', time()));

        if($category_id)
        {
            $qb->andWhere('j.category = :category_id')
                ->setParameter('category_id', $category_id);
        }

        $query = $qb->getQuery();

        return $query->getSingleScalarResult();
    }

    public function getActiveJobs($category_id = null, $max = null, $offset = null, $affiliate_id = null)
    {
        $qb = $this->createQueryBuilder('j')
            ->where('j.expiresAt > :date')
            ->andWhere("j.isActivated = :activated")
            ->setParameter("activated", true)
            ->setParameter('date', $this->currentDate())
            ->orderBy('j.expiresAt', 'DESC');

        if($category_id)
        {
            $qb->andWhere('j.category = :category_id')
                ->setParameter('category_id', $category_id);
        }

        if($max)
        {
            $qb->setMaxResults($max);
        }

        if($offset)
        {
            $qb->setFirstResult($offset);
        }

        if($affiliate_id)
        {
            $qb->leftJoin('j.category', 'c')
                ->leftJoin('c.affiliates','a')
                ->andWhere('a.id = :affiliate_id')
                ->setParameter('affiliate_id', $affiliate_id);
        }

        $paginator = Utils::getPaginator($qb->getQuery());

        return $paginator;
    }


    public function getLatestJobCreatedAt($categoryId = null)
    {
        $query = $this->createQueryBuilder("j")
            ->where("j.expiresAt > :date")
            ->andWhere("j.isActivated = :activated")
            ->orderBy("j.expiresAt", "DESC")
            ->setMaxResults(1);

        $query->setParameters(array(
            "date" => Utils::getCurrentDate(),
            "activated" => 1
        ));

        if ($categoryId)
        {
            $query->andWhere("j.category = :category_id");
            $query->setParameter("category_id", $categoryId);
        }

        try {
            /**
             * @var Job $job
             */
            $job = $query->getQuery()->getSingleResult();

            return $job->getCreatedAt()->format(DATE_ATOM);

        } catch (NoResultException $e)
        {
            return null;
        }
    }

    /**
     * Mock-able get current date in specific format function / method
     * @return bool|string
     */
    private function currentDate()
    {
        return Utils::getCurrentDate();
    }
}
